// Generated by CoffeeScript 1.6.3
(function() {
  jQuery(function($) {
    var $input, elements, indexOf, is_editable, last_saved, nativeIndexOf, save, saved_text, unsaved;
    nativeIndexOf = Array.prototype.indexOf;
    indexOf = function(array, item) {
      var idx, len;
      if (nativeIndexOf && array.indexOf === nativeIndexOf) {
        return array.indexOf(item);
      }
      idx = 0;
      len = array.length;
      while (len - idx) {
        if (array[idx] === item) {
          return idx;
        } else {
          idx += 1;
        }
      }
      return -1;
    };
    elements = [];
    saved_text = [];
    save = function(el, text) {
      var idx;
      idx = indexOf(elements, el);
      if (idx === -1) {
        idx = elements.length;
        elements[idx] = el;
      }
      return saved_text[idx] = text;
    };
    last_saved = function(el) {
      var idx;
      idx = indexOf(elements, el);
      if (idx === -1) {
        return;
      }
      return saved_text[idx];
    };
    unsaved = function(el) {
      return indexOf(elements, el) === -1;
    };
    is_editable = function(fn) {
      return function(event) {
        if (this.contentEditable === 'true') {
          return fn.call(this, event);
        }
      };
    };
    $input = $('<input style=position:absolute;left:-9999px tabindex=-1>').appendTo(document.body);
    return $('html').delegate('.contenteditable', 'click', function(event) {
      var el, range, selection;
      if (!$(event.target).hasClass('contenteditable')) {
        return;
      }
      el = event.target.firstChild;
      el.focus();
      range = document.createRange();
      range.selectNode(el.firstChild);
      selection = window.getSelection();
      selection.removeAllRanges();
      return selection.addRange(range);
    }).delegate('[contentEditable]', {
      keydown: is_editable(function(event) {
        var $el, text;
        $el = $(this);
        text = $el.text();
        if (unsaved(this)) {
          save(this, text);
        }
        switch (event.keyCode) {
          case 8:
            if (text === '') {
              return event.preventDefault();
            }
            break;
          case 13:
            event.preventDefault();
            save(this, $el.text());
            return $el.trigger('contentedited');
          case 27:
            $el.text(last_saved(this));
            return $el.blur();
        }
      }),
      blur: is_editable(function() {
        var $el;
        $el = $(this);
        if (!$el.data('save-on-blur')) {
          $el.text(last_saved(this));
        }
        $input[0].setSelectionRange(0, 0);
        return $input.blur();
      })
    });
  });

}).call(this);
